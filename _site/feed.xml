<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CapeskyChung</title>
    <description>2018新的一年新的开始，需要做出一些改变，身体力行。#云在青天水在瓶# 不管你过得如何，生活永远的一往如既，所以不要站在原地。</description>
    <link>http://cenalulu.github.io/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 09 Oct 2018 00:31:13 +0800</pubDate>
    <lastBuildDate>Tue, 09 Oct 2018 00:31:13 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>mongo孤儿数据</title>
        <description>&lt;p&gt;主要介绍什么是孤儿数据，以及孤儿数据的产生，另外还有为什么孤儿数据会被查询到，并对查询的结果产生影响。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;官方定义&lt;/h4&gt;
&lt;p&gt;Mongodb官方文档中，关于orphaned document的描述：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In a sharded cluster, orphaned documents are those documents on a shard that also exist in chunks on other shards as a result of failed migrations or incomplete migration cleanup due to abnormal shutdown. Delete orphaned documents using cleanupOrphaned to reclaim disk space and reduce.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;孤儿文档是指在sharded cluster集群下，同时存在不同shard上的document。在mongodb sharded cluster集群中，分布在不同shard的数据自己是正交，一个文档只能出现在一个shard中。docuemnt宇shard的映射关系维护在config server中。在mongo发生迁移的过程中，mongod进程shutdown，导致迁移过程失败或者部分完成。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;产生原因&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;参考: https://www.cnblogs.com/xybaby/p/7131776.html?utm_source=itdadao&amp;amp;utm_medium=referral&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 08 Oct 2018 03:20:00 +0800</pubDate>
	<link>http://capeskychung.github.io/database/mongo-orphaned-document/</link>
	<guid isPermaLink="true">http://cenalulu.github.io/database/mongo-orphaned-document/</guid>
        
        <category>orphaned document</category>
        
        <category>mongo</category>
        
        
        <category>database</category>
        
      </item>
    
      <item>
        <title>python old school和new school用法</title>
        <description>&lt;p&gt;python2.1(包括2.1)之前的版本只存在旧式类(old school class),python2.2版本之后便出现了新式类new school class。
旧式类生成的时候是没有继承任何类，新式类则继承了object类。python2的类如果没有继承object，那么该类则是旧式类，继承了object则是新式类。python3则不存在旧式类，只有新式类。默认不继承object也是新式类。&lt;/p&gt;

&lt;h5 id=&quot;section&quot;&gt;简介&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;&#39;&#39;old school 不能使用 super 关键字&#39;&#39;&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;&#39;&#39;new school 继承自 object 可以使用 super 关键字&#39;&#39;&#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 两者的区别在于是否继承 object，old school 的查找顺序式深度优先，new school 的查找顺序是 C3 算法&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;section-1&quot;&gt;旧式类继承&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pythob&quot; data-lang=&quot;pythob&quot;&gt;class A():
    def foo1(self):
        print &quot;A&quot;
class B(A):
    def foo2(self):
        pass
class C(A):
    def foo1(self):
        print &quot;C&quot;
class D(B, C):
    pass

d = D()
d.foo1() # 调用的是 A 的 foo1 方法
# result: A&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;实际上想调用的是C的foo1方法，而旧式类的继承顺序导致最后的结果不准确。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;区别特点&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;新式类都从object继承，旧式类不需要&lt;/li&gt;
  &lt;li&gt;新式类的MRO(method resolution order 基类搜索顺序)算法采用C3算法广度优先搜索，而旧式类的MRO算法是采用深度优先搜索&lt;/li&gt;
  &lt;li&gt;新式类相同父类只执行一次构造函数，旧式类重复执行多次&lt;/li&gt;
  &lt;li&gt;python 2.x中默认都是旧式类，只有显示继承了object才是新式类&lt;/li&gt;
  &lt;li&gt;python 3.x中默认的都是新式类，旧式类被移除，不必显示继承object&lt;/li&gt;
  &lt;li&gt;新式类对象可以直接通过__class__属性获取自身类型type&lt;/li&gt;
  &lt;li&gt;新式类增加了__slots__内置属性，可以把实例属性的种类锁定到__slots__规定的范围之中。&lt;/li&gt;
  &lt;li&gt;新式类增加了__getattribute__方法&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 31 Jul 2018 02:04:00 +0800</pubDate>
	<link>http://capeskychung.github.io/python/python-old_new-school-class/</link>
	<guid isPermaLink="true">http://cenalulu.github.io/python/python-old_new-school-class/</guid>
        
        <category>old school</category>
        
        <category>new school</category>
        
        <category>python</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>bully算法</title>
        <description>&lt;p&gt;Bully算法是一种协调者(主节点)竞选算法，主要思想是集群中的每个成员都可以声明它是主节点并通知其他节点。其他节点可以选择接受这个声明或者拒绝并进入主节点竞争。被其他所有节点接受的节点才能成为主节点。节点按照一些属性(比如进程ID)来判断应该接受谁胜出。Mongo早期的版本便是采用bully进行主节点选取。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;算法流程&lt;/h4&gt;
&lt;p&gt;在很多实际的应用中，用来判断节点胜出的条件都会不一致，可以根据具体的环境选择。算法定义的时候给出的例子是以最大的可用进程ID为主节点。
算法有三种消息：&lt;br /&gt;
1) 选举消息(Election Message)&lt;br /&gt;
2) 应答消息(Answer(Alive) Message)&lt;br /&gt;
3) 选举成功消息(Coordinator(Victory) Message )&lt;/p&gt;

&lt;p&gt;当一个进程P从故障中恢复过来，或者接受到主节点失效的信息时，操作如下：&lt;br /&gt;
1) 如果进程P有最大的进程ID，向其他进程广播选举成功消息.否则向进程号比自己大的进程发送选举消息。&lt;br /&gt;
2) 如果进程P发送选举消息之后，没有接收到应答，就会向其他的节点广播选举成功消息，并成为主节点。 &lt;br /&gt;
3) 如果进程P收到比它进程ID大的进程的Answer Message，选举失败，等待接收其他进程的Victory Message。&lt;br /&gt;
4) 如果进程P收到比它进程ID小的进程的Election Message时，向该进程发送一个Answer Message。并启动选举进程，向比他更高的进程发送Election Message。 &lt;br /&gt;
5) 如果进程P收到Victory Message，会把发送这条消息的节点当成主节点。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;算法实现&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/algorithm/bully/bully.png&quot; alt=&quot;算法流程&quot; /&gt;  &lt;br /&gt;
1. 最初集群有5个节点，节点5是一个公认的协调者。&lt;br /&gt;
2. 假设节点5挂了，并且节点2和节点3同时发现了这一情况。两个节点开始竞选并发送竞选消息给ID更大的节点。&lt;br /&gt;
3. 节点4淘汰了节点2和3，节点3淘汰了节点2。&lt;br /&gt;
4. 这时候节点1察觉了节点5失效并向所有ID更大的节点发送了竞选信息。&lt;br /&gt;
5. 节点2、3和4都淘汰了节点1。&lt;br /&gt;
6. 节点4发送竞选信息给节点5。&lt;br /&gt;
7. 节点5没有响应，所以节点4宣布自己当选并向其他节点通告了这一消息&lt;/p&gt;

</description>
        <pubDate>Thu, 03 May 2018 05:04:00 +0800</pubDate>
	<link>http://capeskychung.github.io/algorithm/bully/</link>
	<guid isPermaLink="true">http://cenalulu.github.io/algorithm/bully/</guid>
        
        <category>bully</category>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>raft算法</title>
        <description>
</description>
        <pubDate>Wed, 25 Apr 2018 05:04:00 +0800</pubDate>
	<link>http://capeskychung.github.io/algorithm/raft/</link>
	<guid isPermaLink="true">http://cenalulu.github.io/algorithm/raft/</guid>
        
        <category>raft</category>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>paxos一致性算法</title>
        <description>&lt;p&gt;在分布式的环境下，保持状态数据的一致性非常重要，目前的分布式系统大多采用最终一致性算法。其中比较有名的便是paxos。比如mongo，&lt;/p&gt;

</description>
        <pubDate>Wed, 25 Apr 2018 05:04:00 +0800</pubDate>
	<link>http://capeskychung.github.io/algorithm/paxos/</link>
	<guid isPermaLink="true">http://cenalulu.github.io/algorithm/paxos/</guid>
        
        <category>paxos</category>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>c++ tinyxml使用</title>
        <description>&lt;p&gt;主要介绍tinyxml的使用、优缺点.以及源码阅读。&lt;/p&gt;

&lt;h4 id=&quot;tinyxml&quot;&gt;tinyxml&lt;/h4&gt;
&lt;p&gt;tinyxml2和tinyxml1都是Thomason编写的。tinyxml2适用于大部分的c/c++项目，久经考验，所以实用性毋庸置疑。相对于tinyxml1来说，tinyxml2只有两个文件，更为简洁；tinyxml1则有6个文件，一般生成静态库使用，也可生成动态。
tinyxml2于tinyxml1的API相似，测试案例足够丰富。tinyxml2解析器基本上是重写，更适合游戏开发使用，使用内存更少，更快，使用更少的内存分配。另外tinyxml2取消了对STL的支持，字符串查询均使用const char *来比奥斯减少了string类型对象的构造，代码更为简洁。    &lt;br /&gt;
相同的地方： &lt;br /&gt;
* 使用简单易用的API&lt;br /&gt;
* 基于DOM的解析器&lt;br /&gt;
* 都支持UTF-8编码&lt;/p&gt;

&lt;p&gt;tinyxml2优点：&lt;br /&gt;
* 对C/C++项目普适性高  &lt;br /&gt;
* 内存消耗更少，相对于tinyxml1节省近40%，速度更快 &lt;br /&gt;
* 无需C++ STL支持 &lt;br /&gt;
* 使用较新的C++特性&lt;br /&gt;
* 处理特殊的空白字符，空格，TAB和回车&lt;/p&gt;

&lt;p&gt;tinyxml1的优点： &lt;br /&gt;
* 较好的错误跟踪，可以显示错误的位置&lt;br /&gt;
* 提供C++ STL的支持，流、字符串等 &lt;br /&gt;
* 经历更多更好的测试&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;实际使用&lt;/h4&gt;
&lt;p&gt;在项目中的使用有多重方式，一般有三种方式： &lt;br /&gt;
1. 直接将tinyxml2.h和tinyxml2.cpp代码copy到相应的工程目录，然后#include “tinyxmml2.h”, using namespace tinyxml2即可在代码中使用&lt;br /&gt;
2. 生成静态库，代码下载之后直接build可生成静态库，静态库相对文件比较大 &lt;br /&gt;
3. 生成动态库，可以分离出使用，并可以进行代码更新 &lt;br /&gt;
大部分项目使用第一种和第三种方式，第三种方式一般在需要对xml功能进行定制化开发，添加一些额外功能使用的较多。&lt;/p&gt;

&lt;p&gt;动态库生成，在tinyxml2.h前面加上&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define TINYXML2_EXPORT &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 25 Apr 2018 04:04:00 +0800</pubDate>
	<link>http://capeskychung.github.io/python/c++-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
	<guid isPermaLink="true">http://cenalulu.github.io/python/c++-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
        
        <category>tinyxml</category>
        
        <category>c++</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>c++ tinyxml使用</title>
        <description>&lt;p&gt;主要介绍tinyxml的使用、优缺点.以及源码阅读。&lt;/p&gt;

&lt;h4 id=&quot;tinyxml&quot;&gt;tinyxml&lt;/h4&gt;
&lt;p&gt;tinyxml2和tinyxml1都是Thomason编写的。tinyxml2适用于大部分的c/c++项目，久经考验，所以实用性毋庸置疑。相对于tinyxml1来说，tinyxml2只有两个文件，更为简洁；tinyxml1则有6个文件，一般生成静态库使用，也可生成动态。
tinyxml2于tinyxml1的API相似，测试案例足够丰富。tinyxml2解析器基本上是重写，更适合游戏开发使用，使用内存更少，更快，使用更少的内存分配。另外tinyxml2取消了对STL的支持，字符串查询均使用const char *来比奥斯减少了string类型对象的构造，代码更为简洁。    &lt;br /&gt;
相同的地方： &lt;br /&gt;
* 使用简单易用的API&lt;br /&gt;
* 基于DOM的解析器&lt;br /&gt;
* 都支持UTF-8编码&lt;/p&gt;

&lt;p&gt;tinyxml2优点：&lt;br /&gt;
* 对C/C++项目普适性高  &lt;br /&gt;
* 内存消耗更少，相对于tinyxml1节省近40%，速度更快 &lt;br /&gt;
* 无需C++ STL支持 &lt;br /&gt;
* 使用较新的C++特性&lt;br /&gt;
* 处理特殊的空白字符，空格，TAB和回车&lt;/p&gt;

&lt;p&gt;tinyxml1的优点： &lt;br /&gt;
* 较好的错误跟踪，可以显示错误的位置&lt;br /&gt;
* 提供C++ STL的支持，流、字符串等 &lt;br /&gt;
* 经历更多更好的测试&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;实际使用&lt;/h4&gt;
&lt;p&gt;在项目中的使用有多重方式，一般有三种方式： &lt;br /&gt;
1. 直接将tinyxml2.h和tinyxml2.cpp代码copy到相应的工程目录，然后#include “tinyxmml2.h”, using namespace tinyxml2即可在代码中使用&lt;br /&gt;
2. 生成静态库，代码下载之后直接build可生成静态库，静态库相对文件比较大 &lt;br /&gt;
3. 生成动态库，可以分离出使用，并可以进行代码更新 &lt;br /&gt;
大部分项目使用第一种和第三种方式，第三种方式一般在需要对xml功能进行定制化开发，添加一些额外功能使用的较多。&lt;/p&gt;

&lt;p&gt;动态库生成，在tinyxml2.h前面加上&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define TINYXML2_EXPORT &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 25 Apr 2018 04:04:00 +0800</pubDate>
	<link>http://capeskychung.github.io/python/C++-tinyxml/</link>
	<guid isPermaLink="true">http://cenalulu.github.io/python/C++-tinyxml/</guid>
        
        <category>tinyxml</category>
        
        <category>c++</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>mongo索引</title>
        <description>&lt;p&gt;python正则表达式&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;__builtins__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;a &amp;gt; 0&#39;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;a &amp;lt;= 0&#39;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Tue, 24 Apr 2018 03:20:00 +0800</pubDate>
	<link>http://capeskychung.github.io/database/mongo-index/</link>
	<guid isPermaLink="true">http://cenalulu.github.io/database/mongo-index/</guid>
        
        <category>re</category>
        
        <category>mongo</category>
        
        
        <category>database</category>
        
      </item>
    
      <item>
        <title>红黑树</title>
        <description>&lt;p&gt;二叉搜索树可以快速定位一个给定关键字的数据项，可以快速插入和删除数据。二叉树存在一个问题，如果插入的数据是正序或者逆序的数据，二叉搜索树的执行会变慢，因为有序的二叉树是非平衡的，此时的二叉树类似与链表。
红黑树,基于二叉搜索树，二叉搜索树可以快速地找到一个给定的关键字的数据项，并且可以快速地插入和删除数据项。以较快的时间O(logN)来搜索一棵树，需要保证树总是平衡的，树种的每个节点在它左边的后代数目和在它右边的后代数据应该大致相等。红黑树就是一棵平衡树，对要插入的数据项，插入过程要检查是否破坏树的特征，是则程序需要纠正，改变树的结构，从而保持树的平衡。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;特征与规则&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;所有节点都有颜色&lt;/li&gt;
  &lt;li&gt;在插入和删除的过程中，要遵循保持这些颜色的不同排列的规则。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;红黑树的主要规则：
1. 每个节点不是红色就是黑色；
2. 根节点总是黑色的；
3. 如果节点是红色的，则它的子节点必须是黑色的（反之不一定）；
4. 从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（相同的黑色高度）&lt;/p&gt;

&lt;p&gt;在红黑树中插入的节点都是红色的，因为插入一个红色节点比插入一个黑色节点违背红黑原则的可能性更小。原因是：插入黑色节点总会改变黑色高度（规则4），但是插入红色节点只有一半的概率违背规则3.规则3比规则4更容易修正。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;修正平衡性&lt;/h4&gt;
&lt;p&gt;红黑树主要通过三种方式平衡，改变节点颜色、左旋和右旋。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;变色&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;改变节点颜色因为违背了规则3.假设现在节点E，然后插入节点A和S，节点A在左子节点，S在右子节点，目前是平衡的。如果此时插入一个节点，就出现了不平衡，因为红色节点的子节点必须为褐色，但是新差的节点是红色的，所以此时必须改变节点颜色。将根的两个子节点从红色变为黑色，将父节点从黑色变为红色。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;左旋
通常左旋操作用于将一个向右倾斜的红色链接选座为向左链接。
左旋示意图：对节点x进行左旋&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;     &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;                       &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;                       &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;                       &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
   &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;                     &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;lx&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;-----&amp;gt;&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ry&lt;/span&gt; 
     &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;ly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ry&lt;/span&gt;               &lt;span class=&quot;n&quot;&gt;lx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ly&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;左旋做了三件事： &lt;br /&gt;
  1. 将y的左子节点赋给x的右子节点,并将x赋给y左子节点的父节点(y左子节点非空时)  &lt;br /&gt;
  2. 将x的父节点p(非空时)赋给y的父节点，同时更新p的子节点为y(左或右)  &lt;br /&gt;
  3. 将y的左子节点设为x，将x的父节点设为y&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;右旋&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;右旋示意图：对节点y进行右旋&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;         &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; 
        &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;                   &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; 
       &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt; 
     &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ry&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;-----&amp;gt;&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;lx&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;                     &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;lx&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;rx&lt;/span&gt;                   &lt;span class=&quot;n&quot;&gt;rx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ry&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;右旋做了三件事： 
  1. 将x的右子节点赋给y的左子节点,并将y赋给x右子节点的父节点(x右子节点非空时) &lt;br /&gt;
  2. 将y的父节点p(非空时)赋给x的父节点，同时更新p的子节点为x(左或右)  &lt;br /&gt;
  3. 将x的右子节点设为y，将y的父节点设为x&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;红黑树操作&lt;/h4&gt;

&lt;p&gt;红黑树节点&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;RED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BLACK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RBNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 默认为黑色&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
		&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;R&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__cmp__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__lt__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__gt__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RBNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cann&#39;t cmp other type&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__lt__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RBNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cann&#39;t cmp other type&quot;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__gt__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RBNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cann&#39;t cmp other type&quot;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;红黑树插入&lt;br /&gt;
红黑树的插入与二叉搜索树的实现一致，主要的是在于最后的insertFixUp操作。插入数据后会导致树不平衡，insertFixUp要根据情况，决定何时变色，左旋，右旋。
第一次插入的时候，原树为空，只会违背规则2（根节点必须为黑色），只需要将根节点的颜色改为黑色即可。&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Apr 2018 01:04:00 +0800</pubDate>
	<link>http://capeskychung.github.io/algorithm/red-black-tree/</link>
	<guid isPermaLink="true">http://cenalulu.github.io/algorithm/red-black-tree/</guid>
        
        <category>R-B Tree</category>
        
        <category>algorithm</category>
        
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>python descriptor用法</title>
        <description>&lt;p&gt;初学python的时候，以为python的代码块结束以缩进来控制即可。随着深入学习，发现了python可以支持跟shell一样以end来结束代码&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;__builtins__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;a &amp;gt; 0&#39;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;a &amp;lt;= 0&#39;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 30 Mar 2018 02:04:00 +0800</pubDate>
	<link>http://capeskychung.github.io/python/python-descriptor/</link>
	<guid isPermaLink="true">http://cenalulu.github.io/python/python-descriptor/</guid>
        
        <category>descriptor</category>
        
        <category>python</category>
        
        
        <category>python</category>
        
      </item>
    
  </channel>
</rss>
